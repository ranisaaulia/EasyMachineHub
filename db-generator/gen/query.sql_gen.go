// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
)

const createEmployees = `-- name: CreateEmployees :one

INSERT INTO
    employees(
        employee_id,
        user_id,
        name,
        position
    )
VALUES ($1, $2, $3, $4) RETURNING employee_id
`

type CreateEmployeesParams struct {
	EmployeeID int32         `db:"employee_id" json:"employeeId"`
	UserID     sql.NullInt32 `db:"user_id" json:"userId"`
	Name       string        `db:"name" json:"name"`
	Position   string        `db:"position" json:"position"`
}

func (q *Queries) CreateEmployees(ctx context.Context, arg CreateEmployeesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployees,
		arg.EmployeeID,
		arg.UserID,
		arg.Name,
		arg.Position,
	)
	var employee_id int32
	err := row.Scan(&employee_id)
	return employee_id, err
}

const createUsers = `-- name: CreateUsers :one

INSERT INTO
    users (
        user_id,
        username,
        password
    )
VALUES
(
        $1,
        $2,
        $3
    ) RETURNING user_id
`

type CreateUsersParams struct {
	UserID   int32  `db:"user_id" json:"userId"`
	Username string `db:"username" json:"username"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUsers, arg.UserID, arg.Username, arg.Password)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteEmployees = `-- name: DeleteEmployees :exec

DELETE FROM employees WHERE employee_id = $1
`

func (q *Queries) DeleteEmployees(ctx context.Context, employeeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployees, employeeID)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec

DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, userID)
	return err
}

const getEmployees = `-- name: GetEmployees :one

SELECT employee_id, user_id, name, position FROM employees WHERE employee_id = $1
`

func (q *Queries) GetEmployees(ctx context.Context, employeeID int32) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployees, employeeID)
	var i Employee
	err := row.Scan(
		&i.EmployeeID,
		&i.UserID,
		&i.Name,
		&i.Position,
	)
	return i, err
}

const getusers = `-- name: Getusers :one


SELECT user_id, username, password FROM users WHERE user_id = $1
`

// users
func (q *Queries) Getusers(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getusers, userID)
	var i User
	err := row.Scan(&i.UserID, &i.Username, &i.Password)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many

SELECT employee_id, user_id, name, position FROM employees ORDER BY name
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.UserID,
			&i.Name,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listusers = `-- name: Listusers :many

SELECT user_id, username, password FROM users ORDER BY username
`

func (q *Queries) Listusers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUsers = `-- name: UpdateUsers :exec

UPDATE users
set
    username = $2,
    password = $3
WHERE user_id = $1
`

type UpdateUsersParams struct {
	UserID   int32  `db:"user_id" json:"userId"`
	Username string `db:"username" json:"username"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) error {
	_, err := q.db.ExecContext(ctx, updateUsers, arg.UserID, arg.Username, arg.Password)
	return err
}
